Given a set of non-overlapping intervals, insert a new interval into the intervals (merge if necessary).

You may assume that the intervals were initially sorted according to their start times.

Example 1:

Given intervals [1,3],[6,9] insert and merge [2,5] would result in [1,5],[6,9].

Example 2:

Given [1,2],[3,5],[6,7],[8,10],[12,16], insert and merge [4,9] would result in [1,2],[3,10],[12,16].

This is because the new interval [4,9] overlaps with [3,5],[6,7],[8,10].

Make sure the returned intervals are also sorted.


vector<Interval> Solution::insert(vector<Interval> &intervals, Interval newInterval) {
    // Do not write main() function.
    // Do not read input, instead use the arguments to the function.
    // Do not print the output, instead return values as specified
    // Still have a doubt. Checkout www.interviewbit.com/pages/sample_codes/ for more details
    vector<Interval> ans;
    int x, y, n = intervals.size();
    x = min(newInterval.start, newInterval.end);
    y = max(newInterval.start, newInterval.end);
    for(int i = 0; i<n; i++){
        if(x >= intervals[i].start && x <= intervals[i].end) x = intervals[i].start;        // [ x ] y
        else if(y >= intervals[i].start && y <= intervals[i].end) y = intervals[i].end;     // x [ y ] 
        else if(x < intervals[i].start && y < intervals[i].start) {                         // x y [ ]
            ans.push_back(Interval(x,y));
            x = intervals[i].start;
            y = intervals[i].end;
        }
        else if(x > intervals[i].end) ans.push_back(intervals[i]);                          // [ ] x y
    }
    ans.push_back(Interval(x,y));
    return ans;
}
