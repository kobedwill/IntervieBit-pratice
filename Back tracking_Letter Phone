Given a digit string, return all possible letter combinations that the number could represent.

A mapping of digit to letters (just like on the telephone buttons) is given below.

The digit 0 maps to 0 itself.

The digit 1 maps to 1 itself.

Input: Digit string "23"
Output: ["ad", "ae", "af", "bd", "be", "bf", "cd", "ce", "cf"].

Make sure the returned strings are lexicographically sorted.
///////////////////////////////////////////////////////////////////////////////////////////////////////////////

void helper(const vector<string> dict, const string A, vector<string> &ans ,int length, string &record){
    if(record.size() == A.size()){
        ans.push_back(record);
        return;
    }
    string str = dict[A[length]-'0'];
    for(int i = 0; i<str.size(); i++){
        record.push_back(str[i]);
        helper(dict, A, ans, length+1, record);
        record.pop_back();
    }
}

vector<string> Solution::letterCombinations(string A) {
    if (A.empty()) return {};
    vector<string> dict(10);
    dict[0] = {"0"};
    dict[1] = {"1"};
    dict[2] = {"abc"};
    dict[3] = {"def"};
    dict[4] = {"ghi"};
    dict[5] = {"jkl"};
    dict[6] = {"mno"};
    dict[7] = {"pqrs"};
    dict[8] = {"tuv"};
    dict[9] = {"wxyz"};
    vector<string> ans;
    string record;
    helper(dict, A, ans, 0, record);
    
    return ans;
}
