bool isPalindrome(string a){
    int n = a.size();
    /*while(start < end){
        if(a[start] != a[end])
            return 0;
        start++;
        end--;
    }*/
    for(int i = 0; i*2<n; i++){
        if(a[i] != a[n-1-i])
            return 0;
    }
    return 1;
}

void helper(vector<vector<string>> &ans, vector<string> &record, string A, int start){
    if(start == A.size()){
        ans.push_back(record);
        return;
    }
    for(int i = start; i<A.size(); i++){
        if(!isPalindrome(A.substr(start, i-start+1))) continue;
        record.push_back(A.substr(start, i-start+1));
        helper(ans, record, A, i+1);
        record.pop_back();
    }
}

vector<vector<string> > Solution::partition(string A) {
    // Do not write main() function.
    // Do not read input, instead use the arguments to the function.
    // Do not print the output, instead return values as specified
    // Still have a doubt. Checkout www.interviewbit.com/pages/sample_codes/ for more details
    vector<vector<string>> ans;
    vector<string> record;
    
    helper(ans, record, A, 0);
    return ans;
}
