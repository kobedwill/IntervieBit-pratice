int Solution::minPathSum(vector<vector<int> > &A) {
    int n = A.size(), m = A[0].size();
    if(n == 0 || m ==0) return 0;
    int dp[n][m];
    
    for(int i =0; i<n; i++){
        for(int j=0; j<m; j++){
            dp[i][j] = 0;
        }
    }
    dp[n-1][m-1] = A[n-1][m-1];
    for(int i = m-2; i>=0; i--){
        dp[n-1][i] =  A[n-1][i] + dp[n-1][i+1];
    }
    for(int i = n-2; i>=0; i--){
        dp[i][m-1] = A[i][m-1] + dp[i+1][m-1]; 
    }
    
    for(int i = n-2; i>=0; i--){
        for(int j = m-2; j>=0; j--){
            dp[i][j] = min(A[i][j] + dp[i+1][j], A[i][j] + dp[i][j+1]);
        }
    }
    /*for(int i = n-1; i>=0; i--){
        for(int j = m-1; j>=0; j--){
            if(i == n-1 && j == m-1) dp[i][j] = A[i][j];
            else if(i == n-1) dp[i][j] = A[i][j] + dp[i][j+1];
            else if(j == m-1) dp[i][j] = A[i][j] + dp[i+1][j];
            else dp[i][j] = A[i][j] + min(dp[i+1][j], dp[i][j+1]);
            }
    }*/
    return dp[0][0];
}
