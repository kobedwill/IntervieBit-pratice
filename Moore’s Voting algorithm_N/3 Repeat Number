You're given a read only array of n integers. Find out if any integer occurs more than n/3 times in the array in linear time and constant additional space.

If so, return the integer. If not, return -1.

If there are multiple solutions, return any one.

Example:

Input: [1 2 3 1 1]
Output: 1 
1 occurs 3 times which is more than 5/3 times.

////////////////////////////////////////////////////////////////////////////////////////
int Solution::repeatedNumber(const vector<int> &A) {
    
    //Mooreâ€™s Voting algorithm
    
    int n = A.size();
    int first = INT_MAX, second = INT_MAX;
    int count1 = 0, count2 = 0;
    
    for(int i = 0; i<n; i++){
        if(A[i] == first) count1++;                               // repeat more than n/3 --> maximum 2 element can achieve 
        else if(A[i] == second) count2++;                         // if there occurs a element repeated more than n/3 times --> its count minus the number (except the number which 
                                                                  // occurs second highest) would be > 0
        else if(count1 == 0){
            first = A[i];
            count1++;
        }
        else if(count2 == 0){
            second = A[i];
            count2++;
        }
        else{
            count1--;
            count2--;
        }
    }
    count1 = 0;
    count2 = 0;
    for(int i = 0; i<n; i++){
        if(A[i] == first) count1++;
        if(A[i] == second) count2++;
    }
    
    if(count1 > n/3) return first;
    if(count2 > n/3) return second;
    return -1;
}
